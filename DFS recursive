#include <bits/stdc++.h>
#include <vector>
#include <queue>
using namespace std;
int vsize = 100;
vector<vector<int>> matrix(vsize);
vector<bool> visited(100, false);

void DFS(int vert)
{
   if(!visited[vert])
   {
      visited[vert]=True;
      cout<<vert<<" ";
      for(int i=0;i<matrix[var].size(){
         if(!visited(matrix[vert][i])){
             DFS([matrix[vert][i]);
           }
      }
}

void BFS(int vert)
{
   queue<int> Q;
   int var=Q.front();
   Q.pop();
   visited[var]=True;
   cout<<var<<" ";
   for(int i=0;i<matrix[var].size();i++){
      if(!visited[matrix[var][i]){
         Q.push(matrix[var][i];
      }
   }
}

int main()
{
    int vertices, edges, x, y;
    cout << "Enter number of Vertices: ";
    cin >> vertices;
    cout << "Enter number of Edges: ";
    cin >> edges;

    for (int i = 0; i < edges; i++)
    {
        cout << "Enter starting vertex of edge" << i + 1 << ": ";
        cin >> x;
        cout << "Enter ending vertex of edge" << i + 1 << ": ";
        cin >> y;
        matrix[x].push_back(y);
        matrix[y].push_back(x);
    }

    for (int i = 1; i < vertices; i++)
    {
        if (!visited[i])
        {
            DFS(i);
        }
    }

    return 0;
}
