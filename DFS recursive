#include <bits/stdc++.h>
#include <vector>
#include <queue>
using namespace std;
int vsize = 100;
vector<vector<int>> matrix(vsize);
vector<bool> visited(100, false);

void DFS(int vert)
{
   if(!visited[vert])
   {
      visited[vert]=true;
      cout<<vert<<" ";
      for(int i=0;i<matrix[vert].size();i++)
      {
         if(!visited[matrix[vert][i]])
         {
             DFS(matrix[vert][i]);
         }
      }
   }
}

void BFS(int vert)
{
   queue<int> Q;
   Q.push(vert);
   visited[vert]=true;
   
   while(!Q.empty())
   {
       int var=Q.front();
       Q.pop();
       cout<<var<<" ";
       
       
       for(int i=0;i<matrix[vert].size();i++)
       {
          if(!visited[matrix[vert][i]])
          {
             Q.push(matrix[vert][i]);
             visited[matrix[vert][i]]=true;
          }
       }
   }
}

int main()
{
    int vertices, edges, x, y;
    cout << "Enter number of Vertices: ";
    cin >> vertices;
    cout << "Enter number of Edges: ";
    cin >> edges;

    for (int i = 0; i < edges; i++)
    {
        cout << "Enter starting vertex of edge" << i + 1 << ": ";
        cin >> x;
        cout << "Enter ending vertex of edge" << i + 1 << ": ";
        cin >> y;
        matrix[x].push_back(y);
        matrix[y].push_back(x);
    }

    for (int i = 1; i < vertices; i++)
    {
        if (!visited[i])
        {
            //DFS(i);
            BFS(i);
        }
    }

    return 0;
}

